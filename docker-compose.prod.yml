version: '3.8'

services:
  # MySQL Database
  db:
    image: mysql:8.0
    container_name: food_surplus_db_prod
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: food_surplus_db
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    volumes:
      - ./db/schema.sql:/docker-entrypoint-initdb.d/schema.sql
      - mysql_data_prod:/var/lib/mysql
    networks:
      - food_surplus_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    command: --default-authentication-plugin=mysql_native_password

  # Flask Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: food_surplus_backend_prod
    restart: always
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=mysql+pymysql://${DB_USER}:${DB_PASSWORD}@db:3306/food_surplus_db
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - CORS_ORIGINS=${CORS_ORIGINS}
    volumes:
      - backend_uploads:/app/uploads
    depends_on:
      db:
        condition: service_healthy
    networks:
      - food_surplus_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        - VITE_API_URL=${FRONTEND_API_URL}
    container_name: food_surplus_frontend_prod
    restart: always
    depends_on:
      - backend
    networks:
      - food_surplus_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: food_surplus_nginx_prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.prod.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - food_surplus_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and rate limiting (optional but recommended)
  redis:
    image: redis:7-alpine
    container_name: food_surplus_redis_prod
    restart: always
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - food_surplus_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mysql_data_prod:
    driver: local
  backend_uploads:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  food_surplus_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16